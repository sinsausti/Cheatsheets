Docker Cheatsheet

***Docker Basics***

- Docker version:
    docker --version
    docker version

- Docker info:
    docker info

***Working with Containers***

- List all running containers:
    docker ps

- List all containers (running and stopped):
    docker ps -a

- Run a container:
    docker run <image>
    docker run ubuntu

- Run a container with interactive terminal:
    docker run -it <image>
    docker run -it ubuntu /bin/bash

- Run a container in the background:
    docker run -d <image>

- Run a container with port forwarding:
    docker run -p <host_port>:<container_port> <image>
    docker run -p 8080:80 nginx

- Stop a running container:
    docker stop <container_id>

- Start a stopped container:
    docker start <container_id>

- Restart a container:
    docker restart <container_id>

- Remove a container:
    docker rm <container_id>

- Remove all stopped containers:
    docker container prune

***Working with Images***

- List all Docker images:
    docker images

- Pull an image from a registry:
    docker pull <image>
    docker pull ubuntu

- Build an image from a Dockerfile:
    docker build -t <image_name> <path_to_dockerfile>
    docker build -t myapp .

- Tag an image:
    docker tag <image_id> <repository>:<tag>
    docker tag myapp:latest myapp:v1.0

- Push an image to a registry:
    docker push <repository>:<tag>

- Remove an image:
    docker rmi <image_id>

- Remove unused images:
    docker image prune

***Docker Networks***

- List all networks:
    docker network ls

- Create a network:
    docker network create <network_name>

- Connect a container to a network:
    docker network connect <network_name> <container_id>

- Disconnect a container from a network:
    docker network disconnect <network_name> <container_id>

- Remove a network:
    docker network rm <network_name>

***Docker Volumes***

- List all volumes:
    docker volume ls

- Create a volume:
    docker volume create <volume_name>

- Mount a volume to a container:
    docker run -v <volume_name>:<path_in_container> <image>
    docker run -v myvolume:/data ubuntu

- Remove a volume:
    docker volume rm <volume_name>

- Remove all unused volumes:
    docker volume prune

***Docker Compose***

- Start services defined in a docker-compose file:
    docker-compose up

- Start services in the background:
    docker-compose up -d

- Stop services:
    docker-compose down

- View service logs:
    docker-compose logs

- Build or rebuild services:
    docker-compose build

- Run a one-off command:
    docker-compose run <service> <command>
    docker-compose run web /bin/bash

***Docker Container Management***

- View container logs:
    docker logs <container_id>

- Follow container logs:
    docker logs -f <container_id>

- Inspect a container:
    docker inspect <container_id>

- View container stats:
    docker stats

- Execute a command in a running container:
    docker exec -it <container_id> <command>
    docker exec -it mycontainer /bin/bash

***Docker Clean-Up***

- Remove all stopped containers, unused networks, dangling images, and build cache:
    docker system prune

- Remove all unused data (not just dangling):
    docker system prune -a

***Examples***

- MySQL container:
    docker run -d --name mysql1 \
    --network home-network \
    --ip 192.168.11.11 \
    -e MYSQL_ROOT_PASSWORD=password \
    -h mysql1 \
    -p 5100:3306 \
    -p 5101:22 \
    -v /Users/username/Docker/mysql1/datadir:/var/lib/mysql \
    -v /Users/username/Docker/mysql1/sshkey:/root/.ssh \
    -v /Users/sinsausti/Docker/mysql1/confd:/etc/mysql/conf.d \
    mysql

- WordpressDB container:
    docker run -d --name wordpressdb \
    --network home-network \
    --ip 192.168.11.12 \
    -h wordpressdb \
    -p 5200:3306 \
    -p 5201:22 \
    -v /Users/username/Docker/wordpressdb/datadir:/var/lib/mysql \
    -v /Users/username/Docker/wordpressdb/sshkey:/root/.ssh \
    -e MYSQL_ROOT_PASSWORD=password \
    -e MYSQL_DATABASE=wordpressdb \
    -e MYSQL_USER=worduser \
    -e MYSQL_PASSWORD=wordpass \
    mysql

- Wordpress container:
    docker run -d --name wordpress \
    --network home-network \
    --ip 192.168.11.13 \
    -h wordpress \
    -p 5300:80 \
    -p 5301:443 \
    -p 5302:22 \
    -v /Users/username/Docker/wordpress/html:/var/www/html \
    -v /Users/username/Docker/wordpress/sshkey:/root/.ssh \
    wordpress
